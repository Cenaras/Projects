PARSER_BEGIN(Parser)
package Parsing;
import AST.*;
import Exceptions.*;
import Util.*;
import java.lang.reflect.Array;import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
public class  Parser {

    String inputFilePrefix;
    public ArrayList<LetStm> letStatements;
    public Parser(String inputFilePrefix) {
        this.inputFilePrefix = inputFilePrefix;
        letStatements = new ArrayList<LetStm>();
    }

    public Program parse(String inputProgram) {
        Program result = null;

        try {
            String programFile = Files.readString(Paths.get(inputFilePrefix + "test_files\\" + inputProgram));
            String expectedResult = Files.readString(Paths.get(inputFilePrefix + "expected_results\\" +  inputProgram));
            result = new Parser(new java.io.StringReader(programFile)).S(); //Read the program from cmd line and parse with S() as start

            if (!(result.toString().equals(expectedResult))) {
                System.out.println("Expected was: " + expectedResult);
                System.out.println("Actual was: " + result.toString());
                throw new TestException("Comparision difference at index: YET TO IMPLEMENT INDEX DIFFERENCE ERROR");
            }
            System.out.println("Test successful!");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
            e.printStackTrace();
        }
        return result;
    }

    public ArrayList<LetStm> getLetStatements() {
        return letStatements;
    }

}
PARSER_END(Parser)

//ADD MORE STUFF HERE
TOKEN : {
    < INT : (["0"-"9"])+ >
    | < LET : "let" >
    | < ID : (["a"-"z"](["A"-"Z"])*)+ >
    | < PLUS : "+" >
    | < MINUS : "-" >
    | < TIMES : "*" >
    | < DIVIDE : "/" >
    | < SEMICOLON : ";" >
    | < ASSIGNEQ : "=" >

}
/*TODO: ADD PROPER DOCUMENTATION FOR THIS. ALSO ADD TEST PROGRAMS AND COMPARISIONS FOR THEM*/
//INTEGRATE COMMENTS HERE
SKIP : {
    " "
    | "\n"
    | "\t"
    | "\r"
}
//NOTES: javacc lexing.jj, javac *.java afterwards. Add "package lexing;" to files if it dissapears - or remove stuff from the package if it bothers you.

/*  PARSER AND GRAMMAR GOES HERE */
//< LET > <ID > < ASSIGNEQ > <INT>

Program S(): {StatementList s;}
{
    s = StmList() <EOF> { return new Program(s); }
}

StatementList StmList(): {Statement s1;}
{
    s1 = Stm() ( <SEMICOLON> Stm() )* {StatementList statements = new StatementList(); statements.addStatement(s1); return statements;}
}

Exp Exp(): {Exp e1; String op; Exp e2;}
{
    e1 = Term() (op = OpLvlOne() e2 = Term() { e1 = new BinOpExp(e1, op, e2); } )* //We only overwrite e1, if the Kleene-Star is taken. If it is, e1 is the new expression, if not, we keep e1 as the first term
    { return e1;}
}

Statement Stm(): {Token id; Exp exp;}
{
    < LET >  id = < ID > < ASSIGNEQ > exp = Exp() < SEMICOLON > { LetStm statement = new LetStm(new IdentifierExp(id.image), exp); letStatements.add(statement); return statement; }
}

Exp Term(): {Exp e1; String op; Exp e2;}
{
    e1 = Literal() ( op = OpLvlTwo() e2 = Literal() {e1 = new BinOpExp(e1, op, e2); } )*
    { return e1; } //
}

Exp Literal(): {Token lit;}
{
    lit = <INT> {return new IntExp(Integer.parseInt(lit.image));}
}

String OpLvlTwo(): {Token op;}
{
    op = <TIMES> { return op.image; }
    | op = <DIVIDE> { return op.image; }
}

String OpLvlOne(): {Token op;}
{
    op = <PLUS> {return op.image; }
    | op = <MINUS> { return op.image; } //think correct
}

